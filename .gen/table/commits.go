//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Commits = newCommitsTable("", "commits", "")

type commitsTable struct {
	sqlite.Table

	// Columns
	ID             sqlite.ColumnInteger
	GitDiff        sqlite.ColumnString
	CommitMessage  sqlite.ColumnString
	GitDiffCommand sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type CommitsTable struct {
	commitsTable

	EXCLUDED commitsTable
}

// AS creates new CommitsTable with assigned alias
func (a CommitsTable) AS(alias string) *CommitsTable {
	return newCommitsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CommitsTable with assigned schema name
func (a CommitsTable) FromSchema(schemaName string) *CommitsTable {
	return newCommitsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CommitsTable with assigned table prefix
func (a CommitsTable) WithPrefix(prefix string) *CommitsTable {
	return newCommitsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CommitsTable with assigned table suffix
func (a CommitsTable) WithSuffix(suffix string) *CommitsTable {
	return newCommitsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCommitsTable(schemaName, tableName, alias string) *CommitsTable {
	return &CommitsTable{
		commitsTable: newCommitsTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newCommitsTableImpl("", "excluded", ""),
	}
}

func newCommitsTableImpl(schemaName, tableName, alias string) commitsTable {
	var (
		IDColumn             = sqlite.IntegerColumn("id")
		GitDiffColumn        = sqlite.StringColumn("git_diff")
		CommitMessageColumn  = sqlite.StringColumn("commit_message")
		GitDiffCommandColumn = sqlite.StringColumn("git_diff_command")
		allColumns           = sqlite.ColumnList{IDColumn, GitDiffColumn, CommitMessageColumn, GitDiffCommandColumn}
		mutableColumns       = sqlite.ColumnList{GitDiffColumn, CommitMessageColumn, GitDiffCommandColumn}
	)

	return commitsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		GitDiff:        GitDiffColumn,
		CommitMessage:  CommitMessageColumn,
		GitDiffCommand: GitDiffCommandColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
